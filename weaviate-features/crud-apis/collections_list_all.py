# weaviate-client 4.7.1

import weaviate
client = weaviate.connect_to_local()'

# `client.collections.list_all() returns (for example)

'''
{'Blogs': _CollectionConfigSimple(name='Blogs', description=None, generative_config=None, properties=[_Property(name='content', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='title', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='author', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='summary', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='aI_quality_rating', description=None, data_type=<DataType.NUMBER: 'number'>, index_filterable=True, index_range_filters=False, index_searchable=False, nested_properties=None, tokenization=None, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere')], references=[], reranker_config=None, vectorizer_config=_VectorizerConfig(vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, model={'model': 'embed-english-v3.0'}, vectorize_collection_name=True), vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, vector_config=None),
 'Documentation': _CollectionConfigSimple(name='Documentation', description=None, generative_config=None, properties=[_Property(name='content', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='page_title', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='aI_quality_rating', description=None, data_type=<DataType.NUMBER: 'number'>, index_filterable=True, index_range_filters=False, index_searchable=False, nested_properties=None, tokenization=None, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere')], references=[], reranker_config=None, vectorizer_config=_VectorizerConfig(vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, model={'model': 'embed-english-v3.0'}, vectorize_collection_name=True), vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, vector_config=None),
 'RAG_Log': _CollectionConfigSimple(name='RAG_Log', description=None, generative_config=None, properties=[_Property(name='query', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='context', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='system_response', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='user_feedback', description=None, data_type=<DataType.NUMBER: 'number'>, index_filterable=True, index_range_filters=False, index_searchable=False, nested_properties=None, tokenization=None, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='faithfulness_score', description=None, data_type=<DataType.NUMBER: 'number'>, index_filterable=True, index_range_filters=False, index_searchable=False, nested_properties=None, tokenization=None, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='answer_relevance_score', description=None, data_type=<DataType.NUMBER: 'number'>, index_filterable=True, index_range_filters=False, index_searchable=False, nested_properties=None, tokenization=None, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='context_relevance_score', description=None, data_type=<DataType.NUMBER: 'number'>, index_filterable=True, index_range_filters=False, index_searchable=False, nested_properties=None, tokenization=None, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere')], references=[], reranker_config=None, vectorizer_config=_VectorizerConfig(vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, model={'model': 'embed-english-v3.0'}, vectorize_collection_name=True), vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, vector_config=None),
 'GitHub_Issues': _CollectionConfigSimple(name='GitHub_Issues', description=None, generative_config=None, properties=[_Property(name='title', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='content', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='author', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='analysis', description=None, data_type=<DataType.TEXT: 'text'>, index_filterable=True, index_range_filters=False, index_searchable=True, nested_properties=None, tokenization=<Tokenization.WORD: 'word'>, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere'), _Property(name='solution_difficulty_rating', description=None, data_type=<DataType.NUMBER: 'number'>, index_filterable=True, index_range_filters=False, index_searchable=False, nested_properties=None, tokenization=None, vectorizer_config=_PropertyVectorizerConfig(skip=False, vectorize_property_name=True), vectorizer='text2vec-cohere')], references=[], reranker_config=None, vectorizer_config=_VectorizerConfig(vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, model={'model': 'embed-english-v3.0'}, vectorize_collection_name=True), vectorizer=<Vectorizers.TEXT2VEC_COHERE: 'text2vec-cohere'>, vector_config=None)}
'''

from pydantic import BaseModel
from typing import List

class TypedProperty(BaseModel):
    name: str
    data_type: str

class CollectionWithTypedProperties(BaseModel):
    name: str
    properties: List[TypedProperty]

def get_collections_and_properties(client):
    collections = client.collections.list_all()
    collection_with_typed_properties = []
    for collection_name, collection in collections.items():
        properties = collection.properties
        typed_properties = [TypedProperty(name=property.name, data_type=property.data_type) for property in properties]
        collection_with_typed_properties.append(CollectionWithTypedProperties(name=collection_name, properties=typed_properties))
    return collection_with_typed_properties

collections_with_typed_properties = get_collections_and_properties(client)
print(collections_with_typed_properties)

# Returns:
# [CollectionWithTypedProperties(name='RAG_Log', properties=[TypedProperty(name='query', data_type='text'), TypedProperty(name='context', data_type='text'), TypedProperty(name='system_response', data_type='text'), TypedProperty(name='user_feedback', data_type='number'), TypedProperty(name='faithfulness_score', data_type='number'), TypedProperty(name='answer_relevance_score', data_type='number'), TypedProperty(name='context_relevance_score', data_type='number')]), CollectionWithTypedProperties(name='GitHub_Issues', properties=[TypedProperty(name='title', data_type='text'), TypedProperty(name='content', data_type='text'), TypedProperty(name='author', data_type='text'), TypedProperty(name='analysis', data_type='text'), TypedProperty(name='solution_difficulty_rating', data_type='number')]), CollectionWithTypedProperties(name='Blogs', properties=[TypedProperty(name='content', data_type='text'), TypedProperty(name='title', data_type='text'), TypedProperty(name='author', data_type='text'), TypedProperty(name='summary', data_type='text'), TypedProperty(name='aI_quality_rating', data_type='number')]), CollectionWithTypedProperties(name='Documentation', properties=[TypedProperty(name='content', data_type='text'), TypedProperty(name='page_title', data_type='text'), TypedProperty(name='aI_quality_rating', data_type='number')])]
